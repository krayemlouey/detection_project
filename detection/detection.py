#!/usr/bin/env python3
"""
Script Python pour envoyer des d√©tections au syst√®me IoT
Simule un capteur intelligent qui envoie des donn√©es de d√©tection
"""

import requests
import json
import time
import random
from datetime import datetime
from typing import Dict, Any, Optional
import logging

# Configuration
API_BASE_URL = "http://localhost:3000/api"
DEFAULT_USERNAME = "admin"
DEFAULT_PASSWORD = "Admin123!"

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('detection_sender.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class DetectionSender:
    def __init__(self, base_url: str = API_BASE_URL):
        self.base_url = base_url
        self.session = requests.Session()
        self.auth_token: Optional[str] = None
        
    def login(self, username: str = DEFAULT_USERNAME, password: str = DEFAULT_PASSWORD) -> bool:
        """Authentification sur l'API"""
        login_data = {
            "username": username,
            "password": password
        }
        
        try:
            response = self.session.post(
                f"{self.base_url}/login",
                json=login_data,
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get("success"):
                    self.auth_token = data["data"]["token"]
                    self.session.headers.update({
                        "Authorization": f"Bearer {self.auth_token}"
                    })
                    logger.info(f"‚úÖ Connexion r√©ussie pour {username}")
                    return True
                else:
                    logger.error(f"‚ùå √âchec de connexion: {data.get('message')}")
            else:
                logger.error(f"‚ùå Erreur HTTP {response.status_code}: {response.text}")
                
        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå Erreur de connexion: {e}")
            
        return False
    
    def send_detection(self, g_id: str, object_type: str, color: str, confidence: Optional[float] = None) -> bool:
        """Envoie une d√©tection √† l'API"""
        if not self.auth_token:
            logger.error("‚ùå Non authentifi√© - utilisez login() d'abord")
            return False
        
        detection_data = {
            "g_id": g_id,
            "object_type": object_type,
            "color": color,
        }
        
        if confidence is not None:
            detection_data["confidence"] = round(confidence, 3)
        
        try:
            response = self.session.post(
                f"{self.base_url}/detection",
                json=detection_data,
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get("success"):
                    logger.info(f"üîç D√©tection envoy√©e: {g_id} ({object_type}) - {color}")
                    return True
                else:
                    logger.error(f"‚ùå √âchec envoi: {data.get('message')}")
            else:
                logger.error(f"‚ùå Erreur HTTP {response.status_code}: {response.text}")
                
        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå Erreur d'envoi: {e}")
            
        return False
    
    def get_stats(self) -> Optional[Dict[str, Any]]:
        """R√©cup√®re les statistiques actuelles"""
        if not self.auth_token:
            return None
            
        try:
            response = self.session.get(f"{self.base_url}/stats", timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                if data.get("success"):
                    return data["data"]
                    
        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå Erreur r√©cup√©ration stats: {e}")
            
        return None

def generate_random_detection() -> Dict[str, Any]:
    """G√©n√®re une d√©tection al√©atoire pour simulation"""
    object_types = ["Carte microchip", "Carte personnalis√©e", "STM32"]
    colors = ["red", "green", "blue"]
    
    # G√©n√©ration d'un G_ID unique
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    random_id = random.randint(1000, 9999)
    
    object_type = random.choice(object_types)
    color = random.choice(colors)
    
    # Mapping des types pour G_ID
    type_prefixes = {
        "Carte microchip": "MCH",
        "Carte personnalis√©e": "CUS", 
        "STM32": "STM"
    }
    
    color_prefixes = {
        "red": "R",
        "green": "G", 
        "blue": "B"
    }
    
    g_id = f"{type_prefixes[object_type]}_{color_prefixes[color]}_{timestamp}_{random_id}"
    
    return {
        "g_id": g_id,
        "object_type": object_type,
        "color": color,
        "confidence": round(random.uniform(0.7, 0.99), 3)
    }

def simulate_detection_stream(sender: DetectionSender, count: int = 10, delay: float = 2.0):
    """Simule un flux de d√©tections en temps r√©el"""
    logger.info(f"üöÄ D√©marrage de la simulation - {count} d√©tections avec {delay}s d'intervalle")
    
    for i in range(count):
        detection = generate_random_detection()
        
        success = sender.send_detection(
            detection["g_id"],
            detection["object_type"],
            detection["color"],
            detection["confidence"]
        )
        
        if success:
            logger.info(f"‚úÖ D√©tection {i+1}/{count} envoy√©e avec succ√®s")
        else:
            logger.error(f"‚ùå √âchec d√©tection {i+1}/{count}")
        
        if i < count - 1:  # Pas de d√©lai apr√®s la derni√®re d√©tection
            logger.info(f"‚è≥ Attente {delay}s avant la prochaine d√©tection...")
            time.sleep(delay)
    
    logger.info("üèÅ Simulation termin√©e")

def send_predefined_detections(sender: DetectionSender):
    """Envoie un lot de d√©tections pr√©d√©finies pour les tests"""
    predefined = [
        {"g_id": "MCH_R_001", "object_type": "Carte microchip", "color": "red", "confidence": 0.95},
        {"g_id": "CUS_G_001", "object_type": "Carte personnalis√©e", "color": "green", "confidence": 0.88},
        {"g_id": "STM_B_001", "object_type": "STM32", "color": "blue", "confidence": 0.92},
        {"g_id": "MCH_R_002", "object_type": "Carte microchip", "color": "red", "confidence": 0.87},
        {"g_id": "CUS_B_001", "object_type": "Carte personnalis√©e", "color": "blue", "confidence": 0.91},
    ]
    
    logger.info(f"üì¶ Envoi de {len(predefined)} d√©tections pr√©d√©finies")
    
    for detection in predefined:
        success = sender.send_detection(**detection)
        if success:
            logger.info(f"‚úÖ {detection['g_id']} envoy√©")
        time.sleep(1)  # Petite pause entre les envois

def main():
    """Fonction principale"""
    print("üîç Syst√®me d'Envoi de D√©tections IoT")
    print("=" * 50)
    
    sender = DetectionSender()
    
    # Tentative de connexion
    if not sender.login():
        logger.error("‚ùå Impossible de se connecter - V√©rifiez que le serveur est d√©marr√©")
        return
    
    while True:
        print("\nüìã Options disponibles:")
        print("1. Envoyer une d√©tection manuelle")
        print("2. Envoyer des d√©tections pr√©d√©finies")
        print("3. Simuler un flux de d√©tections (10 d√©tections)")
        print("4. Simulation longue (50 d√©tections)")
        print("5. Afficher les statistiques")
        print("6. Test de performance (100 d√©tections rapides)")
        print("0. Quitter")
        
        try:
            choice = input("\nüëâ Votre choix: ").strip()
            
            if choice == "0":
                print("üëã Au revoir!")
                break
                
            elif choice == "1":
                print("\nüìù D√©tection manuelle:")
                g_id = input("G_ID: ").strip()
                
                print("Types disponibles:")
                print("1. Carte microchip")
                print("2. Carte personnalis√©e") 
                print("3. STM32")
                type_choice = input("Type (1-3): ").strip()
                
                object_types = {
                    "1": "Carte microchip",
                    "2": "Carte personnalis√©e",
                    "3": "STM32"
                }
                object_type = object_types.get(type_choice, "Carte microchip")
                
                print("Couleurs disponibles: red, green, blue")
                color = input("Couleur: ").strip()
                
                confidence_input = input("Confiance (0-1, optionnel): ").strip()
                confidence = float(confidence_input) if confidence_input else None
                
                sender.send_detection(g_id, object_type, color, confidence)
                
            elif choice == "2":
                send_predefined_detections(sender)
                
            elif choice == "3":
                simulate_detection_stream(sender, count=10, delay=2.0)
                
            elif choice == "4":
                simulate_detection_stream(sender, count=50, delay=1.0)
                
            elif choice == "5":
                stats = sender.get_stats()
                if stats:
                    print("\nüìä Statistiques actuelles:")
                    print(f"üìà Aujourd'hui: {stats.get('today', {})}")
                    print(f"üìä Total: {stats.get('total', {})}")
                    print(f"üïê Derni√®re mise √† jour: {stats.get('last_updated', 'N/A')}")
                else:
                    print("‚ùå Impossible de r√©cup√©rer les statistiques")
                    
            elif choice == "6":
                logger.info("üöÄ Test de performance - 100 d√©tections rapides")
                start_time = time.time()
                simulate_detection_stream(sender, count=100, delay=0.1)
                end_time = time.time()
                logger.info(f"‚ö° Test termin√© en {end_time - start_time:.2f}s")
                
            else:
                print("‚ùå Choix invalide")
                
        except KeyboardInterrupt:
            print("\nüõë Interruption par l'utilisateur")
            break
        except ValueError as e:
            print(f"‚ùå Erreur de saisie: {e}")
        except Exception as e:
            logger.error(f"‚ùå Erreur inattendue: {e}")

if __name__ == "__main__":
    main()